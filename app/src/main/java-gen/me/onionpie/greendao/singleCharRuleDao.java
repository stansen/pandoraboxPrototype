package me.onionpie.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import me.onionpie.greendao.singleCharRule;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SINGLE_CHAR_RULE".
*/
public class singleCharRuleDao extends AbstractDao<singleCharRule, Long> {

    public static final String TABLENAME = "SINGLE_CHAR_RULE";

    /**
     * Properties of entity singleCharRule.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property RuleName = new Property(1, String.class, "ruleName", false, "RULE_NAME");
        public final static Property RuleDescription = new Property(2, String.class, "ruleDescription", false, "RULE_DESCRIPTION");
        public final static Property IsRuleSetted = new Property(3, Boolean.class, "isRuleSetted", false, "IS_RULE_SETTED");
        public final static Property TargetChar = new Property(4, String.class, "targetChar", false, "TARGET_CHAR");
        public final static Property DestinyChar = new Property(5, String.class, "destinyChar", false, "DESTINY_CHAR");
        public final static Property SelectedPosition = new Property(6, Integer.class, "selectedPosition", false, "SELECTED_POSITION");
        public final static Property ExchangePosition = new Property(7, Integer.class, "exchangePosition", false, "EXCHANGE_POSITION");
    };


    public singleCharRuleDao(DaoConfig config) {
        super(config);
    }
    
    public singleCharRuleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SINGLE_CHAR_RULE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"RULE_NAME\" TEXT," + // 1: ruleName
                "\"RULE_DESCRIPTION\" TEXT," + // 2: ruleDescription
                "\"IS_RULE_SETTED\" INTEGER," + // 3: isRuleSetted
                "\"TARGET_CHAR\" TEXT," + // 4: targetChar
                "\"DESTINY_CHAR\" TEXT," + // 5: destinyChar
                "\"SELECTED_POSITION\" INTEGER," + // 6: selectedPosition
                "\"EXCHANGE_POSITION\" INTEGER);"); // 7: exchangePosition
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SINGLE_CHAR_RULE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, singleCharRule entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ruleName = entity.getRuleName();
        if (ruleName != null) {
            stmt.bindString(2, ruleName);
        }
 
        String ruleDescription = entity.getRuleDescription();
        if (ruleDescription != null) {
            stmt.bindString(3, ruleDescription);
        }
 
        Boolean isRuleSetted = entity.getIsRuleSetted();
        if (isRuleSetted != null) {
            stmt.bindLong(4, isRuleSetted ? 1L: 0L);
        }
 
        String targetChar = entity.getTargetChar();
        if (targetChar != null) {
            stmt.bindString(5, targetChar);
        }
 
        String destinyChar = entity.getDestinyChar();
        if (destinyChar != null) {
            stmt.bindString(6, destinyChar);
        }
 
        Integer selectedPosition = entity.getSelectedPosition();
        if (selectedPosition != null) {
            stmt.bindLong(7, selectedPosition);
        }
 
        Integer exchangePosition = entity.getExchangePosition();
        if (exchangePosition != null) {
            stmt.bindLong(8, exchangePosition);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public singleCharRule readEntity(Cursor cursor, int offset) {
        singleCharRule entity = new singleCharRule( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ruleName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ruleDescription
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // isRuleSetted
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // targetChar
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // destinyChar
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // selectedPosition
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7) // exchangePosition
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, singleCharRule entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRuleName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRuleDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsRuleSetted(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setTargetChar(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDestinyChar(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSelectedPosition(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setExchangePosition(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(singleCharRule entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(singleCharRule entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
